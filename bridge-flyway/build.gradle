buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE'
        classpath 'org.jooq:jooq-codegen:3.8.4'
        classpath 'org.jooq:jooq-meta:3.8.4'
        classpath 'org.jooq:jooq:3.8.4'
        classpath 'org.postgresql:postgresql:9.4.1211.jre7'
        classpath 'org.flywaydb:flyway-core:3.2.1'
    }
}

import org.flywaydb.core.Flyway

group 'com.instructure.bridge'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'


sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    compile.extendsFrom generatedCompile
}

sourceSets {
    generated
    main {
        compileClasspath += generated.output
    }
}

dependencies {
    generatedCompile 'org.jooq:jooq-codegen:3.8.4',
            'org.jooq:jooq-meta:3.8.4',
            'org.jooq:jooq:3.8.4'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'org.springframework.boot:spring-boot-starter-web'
    runtime 'org.postgresql:postgresql'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    compile 'org.flywaydb:flyway-core:3.2.1'
}
def writer = new StringWriter()
new groovy.xml.MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.8.0.xsd') {
    jdbc() {
        driver('org.postgresql.Driver')
        url("jdbc:postgresql://localhost:5432/bridge")
        user('postgres')
        password('admin')

    }
    generator() {
        database() {
            name('org.jooq.util.postgres.PostgresDatabase')
            inputSchema('public')
        }
        generate() {
            pojos('true')
            instanceFields('true')
            deprecated('false')
        }
        target() {
            packageName('com.instructure.bridge')
            directory('src/generated/java')
        }
    }
}

task generateJOOQ() {
    doLast {
        def Flyway flyway = new Flyway();
        flyway.setDataSource("jdbc:postgresql://localhost:5432/bridge", "postgres", "admin");
        flyway.setLocations("filesystem:${project.projectDir}/src/main/resources/db/migration");
        flyway.setSchemas("public");
        flyway.setBaselineOnMigrate(true);

        flyway.migrate();
        org.jooq.util.GenerationTool.generate(
                javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
        )
    }
}

compileGeneratedJava.dependsOn clean
compileGeneratedJava.dependsOn generateJOOQ
compileJava.dependsOn compileGeneratedJava