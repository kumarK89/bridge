@charset "utf-8";

$button-color-modifier: 10%;
$button-color-modifier-double: 20%;

/* OPTIMIZE: Modifier classes should be refactored to BEM format to clarify what combinations are supported:
  for example:

  .btn--reset (.btn--link?)
  .btn--a11y
  .btn--alert
  .btn--secondary
  .btn--tertiary
  .btn--round
  .btn--filled
  .btn--alert-filled
  .btn--secondary-filled
  .btn--round-filled
  .btn--dark
  .btn--alert-dark
  .btn--secondary-dark
  .btn--tertiary-dark
  .btn--round-dark
  .btn--dashed
  .btn--content-editor
*/

/*doc
---
title: Buttons
name: 001_buttons
category: Buttons
---

[[[plugin:src-file-path]]]

Button styles can be applied to any element. Typically you'll want to
use either a `<button>` or an `<a>` element.

If your button is actually a link to another page, please use the
`<a>` element, while if your button performs an action, such as submitting
a form or triggering some javascript event, then use a `<button>` element.

```html_example
<button class="btn" type="button">Click Me</button>
<a class="btn" href="http://bridgelms.com">Don't Click</a>
```

<div class="sg-fixme">
Text is blurry on hover state in Chrome.
</div>


*/

@mixin button-colors($color, $border-color:false) {
  @if $border-color {
    border-color: $border-color;
  } @else {
    border-color: $color;
  }
  color: $color;
}

@mixin button-hover($color, $border-color:false, $background-color:false, $box-shadow: false) {
  .no-touch &:not([disabled]) {
    @if $border-color {
      border-color: $border-color;
    } @else {
      border-color: shade($color, $button-color-modifier);
    }
    @if $background-color {
      background-color: $background-color;
    }
    @if $box-shadow {
      box-shadow: 0 0 0 2px $box-shadow;
    }
    color: $color;
  }
}

@mixin button-active($color, $darken: false, $text: $color, $background-color: $color) {
  .no-touch &:not([disabled]) {
    background: $color;
    @if $darken {
      background: darken($background-color, 15)
    } @else {
      background: lighten($background-color, 35);
    }
    border-color: $color;
    color: $text;
  }
}

@mixin filled-button($color) {
  color: $white;
  background-color: $color;
  border-color: $color;
}

@mixin filled-button-hover($color) {
  .no-touch &:not([disabled]) {
    background: shade($color, $button-color-modifier);
    border-color: shade($color, $button-color-modifier);
    color: $white;
  }

  &:hover:after {
    -webkit-transform: scale(0.85);
    -moz-transform: scale(0.85);
    -ms-transform: scale(0.85);
    transform: scale(0.85);
  }
}

@mixin filled-button-active($color) {
  .no-touch &:not([disabled]) {
    background: shade($color, $button-color-modifier * 3);
    border-color: $color;
    color: $white;
  }
}

@mixin dashed-bordered-button($color) {
  color: $color;
  background-color: white;
  border-color: $color;
  border-style: dashed;
  border-width: 1px;
  border-radius: 5px; // FIXME: rounded corners are rendered as solid in FF (see https://bugzilla.mozilla.org/show_bug.cgi?id=382721)
}

@mixin button-focus() {
  &:focus,
  &:hover {
    outline: 0;
    text-decoration: none;
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(233, 236, 242, 0.3);
    &:active {
      box-shadow: none;
    }
  }

  &.dark,
  &.filled,
  .dark {
    &:focus {
      box-shadow: 0 0 0 3px rgba(177, 213, 249, 0.3);
    }
    &:active {
      box-shadow: none;
    }
  }
  &.dark.white,
  .dark.white {
    &:focus {
      box-shadow: 0 0 0 3px rgba(177, 213, 249, 0.8);
    }
  }
}

@mixin btn-static() {
  @include label;
  text-transform: uppercase;
  font-weight:bold;
  display: inline-block;
  background: transparent;
  border: 1px solid $blue;
  border-radius: 50px;
  cursor: pointer;
  line-height: 1.5;
  padding: 9px 20px 7px;
}

@mixin btn-base() {
  @include btn-static();

  .no-touch & {
    @include transition(all 0.15s $ease-in-out-quad);
  }

  @include button-focus();

  .no-touch &:hover { // FIXME: text is blurry on chrome
    @include transform(scale(1.1) translateZ(0));
  }
}

/*doc
---
title: Disabled Buttons
name: 001_disabled_buttons
category: Buttons
---

```html_example
<button class="btn" disabled type="button">Click Me</button>
<a class="btn disabled" href="http://bridgelms.com">Don't Click</a>
```

*/

.btn:disabled,
.btn.disabled,
button:disabled {
  cursor: default;
  opacity: .4;

  .no-touch &:hover {
    @include transform(none);
  }
}


/*doc
---
title: Styled Buttons
name: 002_styled_buttons
category: Buttons
---

```html_example
<button class="btn {$modifiers}" type="button">Click Me</button>
<button class="btn {$modifiers}" disabled type="button">I'm Disabled</button>
```

[[[plugin:block-modifiers
- alert
- secondary
- tertiary
- btn--round
- btn--content-editor
- btn--dashed
]]]

<div class="sg-fixme">
Corners are rendered as solid with dashed border in FF (see https://bugzilla.mozilla.org/show_bug.cgi?id=382721)
</div>

*/


@mixin btn() {
  @include btn-base;

  @include button-colors($blue);

  &:hover {
    @include button-hover($blue);
  }
  &:active {
    @include button-active($blue);
  }
}

.btn {
  @include btn;
}

@mixin btn-secondary() {
  @include button-colors($dark-grey);

  &:hover{
    @include button-hover($dark-grey);
  }
  &:active {
    @include button-active($dark-grey);
  }
}

.btn.secondary {
  @include btn-secondary;
}

@mixin btn-alert() {
  @include button-colors($pink);

  &:hover  {
    @include button-hover($pink);
  }
  &:active {
    @include button-active($pink);
  }
}
@mixin btn-alert-neutral() {
  @include button-colors($neutral-danger);

  &:hover  {
    @include button-hover($neutral-danger);
  }
  &:active {
    @include button-active($neutral-danger);
  }
}

.btn.alert {
  @include btn-alert;
}
.theme-light .btn.alert {
  @include btn-alert-neutral;
}

@mixin btn-tertiary-color($color) {
  @include button-colors($color, transparent);

  &:hover,
  &:active {
    @include button-hover($color, transparent, transparent);
  }
}

@mixin btn-tertiary() {
  @include btn-tertiary-color($blue);
}

.btn.tertiary {
  @include btn-tertiary();
}

@mixin btn--content-editor() {
  @include button-colors($dark-grey, transparent);
  &:hover,
  &:active {
    @include button-hover($dark-grey, transparent, transparent);
  }
}

.btn--content-editor {
  @include btn--content-editor;
}

@mixin btn--loading() {
  background-image: url('/images/loading.gif');
  background-repeat: no-repeat;
  background-size: 1.7rem;
  background-position: center;
  opacity: .7;
  transition: none!important;
}

.btn--loading, %btn--loading {
  @include btn--loading;
}

@mixin btn--round() {
  height: 2.35rem;
  width: 2.35rem;
  padding: 0;
  line-height: 2.35rem;
  text-align: center;
}
.btn--round,
%btn--round {
  @include btn--round;
}

.btn--dashed {
  @include dashed-bordered-button($dark-grey);
}

.btn--round-with-icon {
  @include btn--round;
  width: 2.35em;
  height: 2.35em;
  line-height: 2.35em;

  i {
    font-size: 100%;
  }
}

.btn:after {
  top: 0;
  left: 0;
  padding: 0;
  box-shadow: 0 0 0 2px $blue;
  -webkit-transition: -webkit-transform 0.2s, opacity 0.2s;
  -moz-transition: -moz-transform 0.2s, opacity 0.2s;
  transition: transform 0.2s, opacity 0.2s;
}

/*doc
---
title: Buttons Over Dark Backgrounds
name: 003_dark_buttons
category: Buttons
---

To use a non-filled button on a dark background apply the `dark` modifier class.

```html_example
<button class="btn dark {$modifiers}" type="button">Click Me</button>
<button class="btn dark {$modifiers}" disabled type="button">I'm Disabled</button>
```

[[[plugin:block-modifiers
- alert
- secondary
- tertiary
- btn--round
]]]

*/

@mixin btn-dark() {
  @include button-colors($blue);

  &:hover  {
    @include button-hover($blue);
  }
  &:active {
    @include button-active($blue, true, $background-color: $black);
  }

  &.disabled,
  &:disabled {
    opacity: .6;
  }
}
.btn.dark, %btn-dark {
  @include btn-dark;
}

@mixin btn-dark-alert() {
  @include button-colors($pink);

  &:hover  {
    @include button-hover($pink);
  }
  &:active {
    @include button-active($pink);
  }
}
.btn.dark.alert, %btn-dark-alert {
  @include btn-dark-alert;
}

@mixin btn-dark-secondary() {
  @include button-colors($white, $grey);
  @include light-text-dark-bg;

  &:hover {
    @include button-hover($white);
  }
  &:active {
    @include button-active($dark-grey);
  }
  &.btn--active {
    @include button-active($dark-grey, false, $text: $blue-grey);
  }
}

.btn.dark.secondary {
  @include btn-dark-secondary;
}

@mixin btn-dark-tertiary() {
  @include button-colors($blue, transparent);

  &:hover,
  &:active {
    @include button-hover($blue, transparent, transparent);
  }
}
.btn.dark.tertiary, %btn-dark-tertiary {
  @include btn-dark-tertiary;
}

.dark { // OPTIMIZE: remove this and use dark modifier on button elements avoid having to use this cascade
  .btn.filled.white {
    @include filled-button($white);

    color: $blue;

    &:hover {
      .no-touch &:not([disabled]) {
        background: $white;
        border-color: $white;
        color: $blue;
        box-shadow : 0 0 0 2px $white;
      }
    }

    &:active {
      .no-touch &:not([disabled]) {
        background: lighten($blue, .4);
        color: $white;
      }
    }

    &:disabled,
    &.disabled {
      @include filled-button($white-op40);
      border-color: transparent;
    }
  }

  .tertiary.white {
    color: $white;

    &:hover {
      .no-touch &:not([disabled]) {
        color: $white;
      }
    }
  }
}

/*doc
---
title: Filled Buttons
name: 004_filled_buttons
category: Buttons
---

To use a filled button apply the `filled` modifier class.

```html_example
<button class="btn filled {$modifiers}" type="button">Click Me</button>
<button class="btn filled {$modifiers}" disabled type="button">I'm Disabled</button>
```

[[[plugin:block-modifiers
- alert
- secondary
- btn--round
]]]

*/

/*doc
---
title: Filled Buttons On Dark Backgrounds
name: 005_filled_buttons_dark
category: Buttons
---

Filled buttons should look the same on dark or light backgrounds, but the `dark` modifier should be
added so that the focus state is visible.

```html_example
<button class="btn dark filled {$modifiers}" type="button">Click Me</button>
<button class="btn dark filled {$modifiers}" disabled type="button">I'm Disabled</button>
```

[[[plugin:block-modifiers
- alert
- secondary
- btn--round
]]]

*/


@mixin btn-filled() {
  @include filled-button($blue);

  &:hover {
    @include filled-button-hover($blue);
  }
  &:active {
    @include filled-button-active($blue);
  }
}

.btn.filled {
  @include btn-filled;
}

@mixin btn-filled-alert() {
  @include filled-button($pink);

  &:active {
    @include filled-button-active($pink);
  }
  &:hover{
    @include filled-button-hover($pink);
  }
}
.btn.filled.alert {
  @include btn-filled-alert;
}

@mixin btn-filled-secondary() {
  @include filled-button($dark-grey);

  &:hover {
    @include filled-button-hover($blue-grey);
  }
  &:active {
    @include filled-button-active($blue-grey);
  }
}
.btn.filled.secondary {
  @include btn-filled-secondary;
}


/*doc
---
title: Unstyled Buttons
name: 006_button_unstyled
category: Buttons
---

If you want to remove all styles (except for padding and margin) from a button you can use the `btn--reset` class. This is useful if you want to
make a button look like a link.

```html_example
<button class="btn--reset" type="button">I don't look like a button</button>
<button class="btn--reset" disabled type="button">I'm Disabled</button>
```
*/

@mixin btn--reset {
  background: transparent;
  border: none;
  @include button-focus();
}

.btn--reset {
  @include btn--reset();
}

.btn--a11y {
  @include btn--reset();
  padding: 0;
}

.btn-margin-r {
  margin-right: 1em;
}

/*doc
---
title: Button Set
name: 007_button-set
category: Buttons
---

<div class="sg-optimize">
  Consider moving this to a component.
</div>

```html_example
<div class="button-set">
  <button class="button-set__button active">Click Me</button>
  <button class="button-set__button">Click Me</button>
  <a href="http://bridgelms.com" class="button-set__button">Don't Click</a>
</div>
```

*/

// OPTIMIZE: maybe this should be a component?

@mixin button-set($selector:"button") {
  position: relative;
  top: 1px;
  @include clearfix;
  #{$selector}, &__button {
    border: none;
    background: transparent;
    border-bottom: 1px solid transparent;
    margin-right: 24px;
    text-transform: uppercase;
    font-weight: bold;
    color: $dark-grey;
    letter-spacing: 0.1em;
    @include x-small;
    @include space(padding, s, top bottom);

    &:focus {
      outline: none;
    }

    &.active,
    &:active {
      background-color: transparent;
      border-bottom-width: 1px;
      border-color: $blue;
      color: $blue;
    }

    @include breakpoint(small) {
      float: left;
      font-size: 16px;
      margin-right: 0;
      padding: 8px;
      width: 50%;
    }
  }
}

.button-set-nav {
  border-bottom: 1px solid $grey;
  @include breakpoint(large) {
    @include space(margin, s, bottom);
  }
}

.button-set {
  @include button-set;
}

.button-set a.button-set__button {
  border-color: transparent;
  width: auto;
  float: none;
  @include space(padding, s, top bottom);
  @include breakpoint(medium) {
    @include space(padding, s);
  }
  &:focus,
  &:hover {
    border-color: $dark-grey;
    padding-bottom: 15px;
    border-bottom-width: 2px;
  }
  &.active {
    border-color: $blue;
  }
  &,
  &:hover {
    text-decoration: none;
  }
  &.disabled {
    border: none;
    border-color: transparent;
    color: $med-grey;
    cursor: default;
  }
}

.button-set--users {
  border-bottom: 1px solid $grey;
  @include space(margin, s, bottom);
  @include breakpoint(small) {
    margin-bottom: 0;
  }
}
.pointer { // OPTIMIZE: find a better place for this
  cursor: pointer;
}
.no-pointer { // OPTIMIZE: find a better place for this
  cursor: auto;
}

/*doc
---
title: Round Button Set
name: 008_round-button-set
category: Buttons
---

<div class="sg-optimize">
  Consider moving this to a component.
</div>

```html_example
<div class="round-button-set">
  <button class="round-button-set__button active">
    <i aria-hidden="true" class="gs-edit dark-grey"></i>
  </button>

  <a href="http://bridgelms.com" class="round-button-set__button">
    <i aria-hidden="true" class="gs-message dark-grey"></i>
  </a>
</div>
```

*/
.round-button-set {
  position: relative;
  top: 6px;
  font-size: 16px;

  &__button {
    @include btn;
    @include btn-secondary;
    @include btn--round;
    margin: 0 5px;
    top: auto;
    font-size: 16px;
    i {
      font-size: 1em;
    }
    @include breakpoint(large) {
      font-size: 12px;
      i {
        font-size: 1.5em;
      }
    }
  }
}

/*doc
---
title: Split Buttons
name: 009_split-buttons
category: Buttons
---

Split buttons provide a way to create a two-part button, e.g. a default
action with an options dropdown. You can replace one `<button>` with a
`<ButtonPopupMenu>` to achieve this effect (see course authoring for a
live example).

```html_example
<div class="btn-split clearfix">
  <button class="btn filled btn-split__left">Add Widget</button>
  <button class="btn filled btn-split__right">
    <i class="gs-arrow-down gs-1x"></i>
  </button>
</div>
```

*/

.btn-split {
  .btn {
    float: left;
    margin: 0;

    &:hover {
      @include transition-property(none);
      transform: none;
    }

    &:focus {
      box-shadow: none;
    }
  }

  .btn-split__left {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  .btn-split__right {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    padding: 9px 12px 7px;
    border-left: 1px solid $dim-blue;
  }
}
