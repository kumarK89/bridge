@charset "utf-8";

/*doc
---
title: Flexbox
name: layout-flexbox
category: Layout
---

Flexbox solves many problems around tricky layouts.

If you wish for a section to have a flexbox you can use `@include display(flex);`.

Other classess available that extend the flexbox are  `.flex-row`,
`.flex-column`, `.flex-space-around`, `.flex-space-between`

A great resource on flexbox:
<a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Guide to Flexbox</a>

*/

/**
 * layout.css
 * stuff for handling tricky layouts
 */

// flexbox

%flex {
  @include display(flex);
}

.flex-row {
  @include display(flex);
  @include flex-direction(row);
}

.flex-column {
  @include display(flex);
  @include flex-direction(column);
}

.flex-space-around {
  @include justify-content(space-around);
}

.flex-space-between {
  @include justify-content(space-between);
}

// TODO: Add more flex-grow values as needed.
@for $i from 1 through 1 {
  .flex-grow-#{$i} {
    -webkit-flex-grow: $i;
    -ms-flex-grow: $i;
    flex-grow: $i;
  }
}

@mixin fb-vertical-center {
  @include display(flex);
  @include justify-content(space-between);
  @include align-items(center);
}

.flex-vertical-center,
%fb-vertical-center{
  @include fb-vertical-center;
}

.flexbox-center {
  @include fb-vertical-center;
  @include justify-content(center);
}

// miscellaneous

.scroll-x {
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

.scroll-y {
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
}

.overflow-hidden {
  overflow: hidden;
}

.overflow-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.invisible,
.spacer {
  visibility: hidden;
}

.all-fixed-layout {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  top: 0;
}
.bottom-fixed-layout {
  position: absolute;
  left: 0;
  bottom: 0;
  right: 0;
}

.top-fixed-layout {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
}

@mixin large-content-area {
  max-width: 1000px;
}
.large-content-area, %large-content-area { @include large-content-area; }

@mixin large-content-area--padded {
  @include large-content-area;
  @include breakpoint(medium) {
    padding: 0;
  }
  @include breakpoint(large) {
    @include space(padding, m, right left);
  }
}

.large-content-area--padded { @include large-content-area--padded; }

.large-content-area--presence {
  max-width: 1000px;
  @include breakpoint(medium) {
    @include space(padding, s);
  }
  @include breakpoint(large) {
    @include space(padding, m);
  }
}


.large-content-area--main-container {
  max-width: 1000px;
  @include breakpoint(large) {
    @include space(margin, l, top);
    @include space(padding, l, right bottom left);
  }
}

/*doc
---
title: Pure Grid
name: layout-pure
category: Layout
---

We are using Pure for grid layouts and is simple to use.

The basic structure is achieved by using a `<div>` or another block level element with the class `.pure-g`. Inside of this parent element you will place other children with a class `.pure-u-*`. * being the amount of columns you want you child to expand.

`.pure-g` sets the row as a group that uses the Pure grid layout.

`.pure-u-*` defines an element as a unit of a grid. You can think of the unit suffix as a fraction to generate the width. For example, using `.pure-u-6-12` will make the element the width 50% and `.pure-u-3-8` will set the width to be 37.5%.

A simple two-thirds layout would be achieved as followed.

```html_example
<div class="pure-g grids-example">
    <div class="pure-u-1-3 padding-trbl-xs grids-example-1">
        column 1
    </div>
    <div class="pure-u-2-3 padding-trbl-xs grids-example-2">
        columns 2
    </div>
</div>
```

Another example with more units.

```html_example
<div class="pure-g grids-example">
    <div class="pure-u-4-24 padding-trbl-xs grids-example-1">
        column 1
    </div>
    <div class="pure-u-12-24 padding-trbl-xs grids-example-2">
        columns 2
    </div>
    <div class="pure-u-5-24 padding-trbl-xs grids-example-3">
        columns 3
    </div>
    <div class="pure-u-3-24 padding-trbl-xs grids-example-4">
        columns 4
    </div>
</div>
```

Units available are:

Full width: `.pure-u-1` `.pure-u-1-1`

Half width: `.pure-u-1-2`

Thirds: `.pure-u-1-3` `.pure-u-2-3`

Fourths: `.pure-u-1-4` `.pure-u-3-4`

Fifths: `.pure-u-1-5` `.pure-u-2-5` `.pure-u-3-5` `.pure-u-4-5` `.pure-u-5-5`

Sixths: `.pure-u-1-6` `.pure-u-5-6`

Eighths: `.pure-u-1-8` `.pure-u-3-8` `.pure-u-5-8` `.pure-u-7-8`

Twelfths: `.pure-u-1-12` `.pure-u-5-12` `.pure-u-7-12` `.pure-u-11-12`

Twenty-fourths: `.pure-u-1-24` `.pure-u-2-24` `.pure-u-3-24` `.pure-u-4-24` `.pure-u-5-24` `.pure-u-6-24` `.pure-u-7-24` `.pure-u-8-24` `.pure-u-9-24` `.pure-u-10-24` `.pure-u-11-24` `.pure-u-12-24` `.pure-u-13-24` `.pure-u-14-24` `.pure-u-15-24` `.pure-u-16-24` `.pure-u-17-24` `.pure-u-18-24` `.pure-u-19-24` `.pure-u-20-24` `.pure-u-21-24` `.pure-u-22-24` `.pure-u-23-24` `.pure-u-24-24`

For more, please reference: <a href="http://purecss.io/grids/">Pure Grids</a>
*/
